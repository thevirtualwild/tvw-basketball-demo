precision highp float;

varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUV;

varying vec3 vPositionW;
varying vec3 vNormalW;

uniform mat4 world;

uniform vec3 cameraPosition;
uniform sampler2D textureSampler;
vec3 bottomColor = vec3(1., .5, 1.);
vec3 topColor = vec3(0, .3, .8);
float fresFalloff = .75;
float fresAmount = 1.0;

vec3 Lerp(vec3 color1, vec3 color2, float t01);

void main(void) {
    vec3 vLightPosition = vec3(0,20,10);

    vec3 vPositionW = vec3(world * vec4(vPosition, 1.0));
    vec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));
    vec3 viewDirectionW = normalize(cameraPosition - vPositionW);

    vec3 lightVectorW = normalize(vLightPosition - vPositionW);
    vec3 color = texture2D(textureSampler, vUV).rgb;

    float phong = max(0., dot(vNormalW, lightVectorW));
    phong = max(.25, phong);

    float upDown = (1.0 + dot(vNormalW, vec3(0,1,0)))/2.0;

    vec3 angleW = normalize(viewDirectionW + lightVectorW);
    float specComp = max(0., dot(vNormalW, angleW));
    specComp = pow(specComp, max(1., 64.)) * 2.;

	float fresnelTerm = dot(viewDirectionW, vNormalW);
	fresnelTerm = clamp(1.0 - fresnelTerm, 0., 1.);
	fresnelTerm = pow(fresnelTerm, fresFalloff);
    
    topColor = Lerp(topColor, bottomColor, upDown);
    topColor = vec3(topColor * fresnelTerm * fresAmount);
    color = color * phong + vec3(specComp) + (topColor);

    gl_FragColor = vec4(color,1);
   
}

vec3 Lerp(vec3 color1, vec3 color2, float t01) {
    vec3 result = (t01 * (color2 - color1)) + color1;
    return result;
}